import java.awt.Color;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;

public class TTTCell 
    extends 
        javax.swing.JPanel  
{

    public TTTCell() {
        this.state = "initial";
        this.vetos = new VetoableChangeSupport(this);
        this.changes = new PropertyChangeSupport(this);
        this.won = false;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonX = new javax.swing.JButton();
        buttonO = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3));

        buttonX.setText("X");
        buttonX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonXActionPerformed(evt);
            }
        });

        buttonO.setText("O");
        buttonO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonX, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
            .addComponent(buttonO, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(buttonX, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonO, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonXActionPerformed
        this.setState("x");

    }

    private void buttonOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOActionPerformed
        this.setState("o");
    }
       
    /*
        add/removePropertyChangeListener are avoided (not overridden) since they are inherited
        from the superclass (JPanel) (adding them causes NullPointerException, 
        superclass is initialized first, JPanel at some point call 
        addPropertyChangeListener but TTTCell has not been initialized (neither
        the constructor has been invoked) and this.changes would be null
        (dynamic dispatch, the most specific method is invoked))
    */
    
    @Override
    public void addVetoableChangeListener(VetoableChangeListener listener){
        this.vetos.addVetoableChangeListener(listener);
    }
    @Override
    public void removeVetoableChangeListener(VetoableChangeListener listener){
        this.vetos.removeVetoableChangeListener(listener);
    }
    
    public void addPropertyChangeListener1(PropertyChangeListener listener){
        this.changes.addPropertyChangeListener(listener);
    }
    
    public void removePropertyChangeListener1(PropertyChangeListener listener){
        this.changes.removePropertyChangeListener(listener);
    }
    
    public String getState(){
        return this.state;
    }
    
    private void setState(String newState){
        //limit case: clicking on green buttons (won match)
        //cant veto because if old and new are equal no event is fired
        if(this.state.equals(newState))
            return;
        
        String oldState = this.state;
        try{
            //vetoable event go to the controller that check if the move 
            //is allowed (meaning a player dont make 2 consecutive moves)
            this.vetos.fireVetoableChange("state", oldState, newState);
            
            this.state = newState;
            
            this.visualChanges(newState);
            //this event go the the board that check is there is a winner
            this.changes.firePropertyChange("state", oldState, newState);
        }catch(PropertyVetoException e){
            
        }  
    }
    
    //apply the visual changes that happen after a button click
    private void visualChanges(String newState){
        if(newState.equals("x")){
            this.buttonX.setBackground(Color.YELLOW);
            this.buttonO.setEnabled(false);
            this.buttonO.setText("");
        }else if(newState.equals("o")){
            this.buttonO.setBackground(Color.CYAN);
            this.buttonX.setEnabled(false);
            this.buttonX.setText("");
        }
    }
    
    public void resetCell(){
        this.won = false;
        this.state = "initial";
        this.buttonO.setText("O");
        this.buttonX.setText("X");
        this.buttonO.setEnabled(true);
        this.buttonX.setEnabled(true);
        
        //set back to the default background color
        this.buttonO.setBackground(null);
        this.buttonX.setBackground(null);
    }
    
    public void disableCell(){
        this.buttonO.setText("");
        this.buttonX.setText("");
        this.disableCellButtons();
    }
    
    public void disableCellButtons(){
        this.buttonO.setEnabled(false);
        this.buttonX.setEnabled(false);
    }
    
    public void wonCell(){
        this.won = true;
        
        if(this.state.equals("x"))
            this.buttonX.setBackground(Color.GREEN);
        else if(this.state.equals("o"))
            this.buttonO.setBackground(Color.GREEN);
        
    }
    
    public boolean getWon(){
        return this.won;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonO;
    private javax.swing.JButton buttonX;
    // End of variables declaration//GEN-END:variables

    // Custom Variables Declaration
    private String state; //bean property 
    private VetoableChangeSupport vetos;
    private PropertyChangeSupport changes;
    private boolean won;
    // End of Custom Variables Declaration
}
