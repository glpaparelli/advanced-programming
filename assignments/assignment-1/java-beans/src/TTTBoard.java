import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class TTTBoard 
    extends 
        javax.swing.JFrame 
    implements 
        PropertyChangeListener 
{

    public TTTBoard() {
        initComponents();
                
        this.moves = 0;
 
        this.cells = new TTTCell[3][3];
        this.cells[0][0] = this.cell00;
        this.cells[0][1] = this.cell01;
        this.cells[0][2] = this.cell02;
        this.cells[1][0] = this.cell10;
        this.cells[1][1] = this.cell11;
        this.cells[1][2] = this.cell12;
        this.cells[2][0] = this.cell20;
        this.cells[2][1] = this.cell21;
        this.cells[2][2] = this.cell22;
        
        for(TTTCell[] row : this.cells){
            for(TTTCell cell : row){
                cell.addPropertyChangeListener1(this);
                cell.addVetoableChangeListener(this.controllerLabel);
            }
        }
    }
    
    
    @Override
    /**
     * @param evt event of an user that perform a move
     */
    public void propertyChange(PropertyChangeEvent evt) {
        this.moves++;
        this.checkWinner((String) evt.getNewValue());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cell00 = new TTTCell();
        cell10 = new TTTCell();
        cell20 = new TTTCell();
        cell01 = new TTTCell();
        cell11 = new TTTCell();
        cell21 = new TTTCell();
        cell02 = new TTTCell();
        cell12 = new TTTCell();
        cell22 = new TTTCell();
        resetButton = new javax.swing.JButton();
        controllerLabel = new TTTController();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(51, 102, 255));
        setResizable(false);

        resetButton.setBackground(new java.awt.Color(255, 102, 102));
        resetButton.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        resetButton.setText("RESTART");
        resetButton.setBorder(null);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        controllerLabel.setBackground(java.awt.Color.lightGray);
        controllerLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        controllerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        controllerLabel.setLabelFor(controllerLabel);
        controllerLabel.setText("START GAME");
        controllerLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        controllerLabel.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(controllerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cell20, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cell21, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cell10, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cell11, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cell12, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cell22, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cell00, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cell01, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cell02, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cell00, cell01, cell02, cell10, cell11, cell12, cell20, cell21, cell22});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cell01, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cell00, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cell02, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cell10, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cell11, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cell20, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cell21, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cell12, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cell22, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(controllerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cell00, cell01, cell02, cell10, cell11, cell12, cell20, cell21, cell22});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        this.resetBoard();
    }

    /*
        put the board in the starting condition
    */
    private void resetBoard(){
        this.moves = 0;
        for(TTTCell[] row : this.cells){
            for(TTTCell cell : row)
                cell.resetCell();
        }   
        this.controllerLabel.resetController();
    }
    
    /*
        disable cells that are not part of the winning sequence
    */
    private void disableLosingCells(){
        for(TTTCell[] row : this.cells){
            for(TTTCell cell : row){
                if(!cell.getWon())
                    cell.disableCellButtons();
            }
        }
    }
    
    /**
     * @param move either X or O: the move just performed
     */
    private void checkWinner(String move){
        int count;
        
        //checking if row winner
        for(int i = 0; i < 3; i++){
            count = 0;
            for(int j = 0; j < 3; j++){
                if(this.cells[i][j].getState().equals(move))
                    count++;
            }
            
            if(count == 3){ //winning i-th row
                //set winning cells to green
                for(int j = 0; j < 3; j++)
                    this.cells[i][j].wonCell();
                
                //set the label to show the winner
                this.controllerLabel.matchEnded(move);
                
                //disable all the non winning buttons
                this.disableLosingCells();
                
                return;
            }
        }
        
        //checking if coloumn winner
        for(int i = 0; i < 3; i++){
            count = 0;
            for(int j = 0; j < 3; j++){
                if(this.cells[j][i].getState().equals(move))
                    count++;
            }
            if(count == 3){ //winning i-th coloumn
                
                //set winning cells to green
                for(int j = 0; j < 3; j++)
                    this.cells[j][i].wonCell();

                //set the label to show the winner
                this.controllerLabel.matchEnded(move);
                       
                //disable all the non winning buttons
                this.disableLosingCells();
                
                return;
            }
        }
        
        //checking if diagonal winner
        count = 0;
        for(int i = 0; i < 3; i++){
            if(this.cells[i][i].getState().equals(move))
                count++;
        }
        if(count == 3){//winning diagonal
            //set winning cells to green
            for(int i = 0; i < 3; i++)
                this.cells[i][i].wonCell();
            
            //set the label to show the winner
            this.controllerLabel.matchEnded(move);        
            
            //disable all the non winning buttons
            this.disableLosingCells();
              
            return;
        }
        
        //checking if antidiagonal winner 
        count = 0; 
        for(int i = 2; i >= 0; i--){
            if(this.cells[2-i][i].getState().equals(move))
                count++;
        }
        if(count == 3){//winning antigiagonal
            //set winning cells to green
            for(int i = 2; i >= 0; i--)
                this.cells[2-i][i].wonCell();

            //set the label to show the winner
            this.controllerLabel.matchEnded(move);     
            
            //disable all the non winning buttons
            this.disableLosingCells();
            
            return;
        }
        
        if(this.moves == 9)
            this.controllerLabel.matchEnded("draw");
    
    }
    
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TTTBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TTTBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TTTBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TTTBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TTTBoard().setVisible(true);
            }
        });    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private TTTCell cell00;
    private TTTCell cell01;
    private TTTCell cell02;
    private TTTCell cell10;
    private TTTCell cell11;
    private TTTCell cell12;
    private TTTCell cell20;
    private TTTCell cell21;
    private TTTCell cell22;
    private TTTController controllerLabel;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables

    // Custom Variables Declaration
    private final TTTCell[][] cells;
    private int moves;
    // End of Custom Variable Declaration


}
